@page "/Account/UserManagementPage";
@using USAIDICANBLAZOR.Models;
@using System.Collections;
@using Microsoft.EntityFrameworkCore;
@using Syncfusion.Blazor.Data;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Identity.UI.Services;
@inject NavigationManager Navigation;
@using USAIDICANBLAZOR.Data;
@inject UserManagement userManagement;
<style>
    .e-edit-dialog {
        max-height: 98%;
        max-width: 100%;
        min-width: 98%;
        min-height: 95%;
    }

    .e-grid.e-bothlines .e-rowcell {
        border-width: 0px 1px 1px 0px;
        border-color: lightgray;
    }

    .e-edit-dialog .e-gridform .e-table {
        border-collapse: separate;
        border-spacing: 1px;
        width: 100%;
        border-color: black;
    }

    .e-grid .e-gridheader /*For line that separates the grid header and content*/ {
        border-bottom-color: #ea1b8d;
        /*font-size: 12px;*/
    }

    .e-grid tr.e-hover /*For row hover*/ {
        background-color: #e66aae;
        color: #FFFFFF;
        /*font-size: 12px;*/
    }

    .e-grid .e-alt_row /*For Alternate row color*/ {
        background-color: #E5E4E2; /*#99CFE3;*/
        /*font-size: 12px;*/
    }

    .e-grid .e-dialog .gridform .e-rowcell {
        padding: .5em;
        border-bottom: 1px solid #c8c8c8;
        border-left: 1px solid #c8c8c8;
        /*font-size: 12px;*/
    }

    /*.e-grid .e-headercell {
        color: whitesmoke;
        background-color: black;
        font-family: Cambria;
        font-weight: 700;
        font-size: 16px;
    }*/

    .Category {
        background-color: steelblue;
        color: white;
    }

    .customCSS.e-rowcell {
        background-color: #EFF5FB;
        /*font-family: 'Bell MT';
        font-style: italic;*/
        /*color: whitesmoke;*/
        /*font-size: 20px;*/
        font: large bolder;
        font-weight: bolder;
        font-family: 'Times New Roman', Times, serif;
    }
</style>
<ol class="breadcrumb" style="margin-top:5px;">
    <li class="breadcrumb-item active" style="width: 100%; background-color: #9DCE5C; color: ghostwhite; font-family: Cambria; padding: 5px; font: bolder;"><strong> Manage Account Information </strong></li>
</ol>
<div class="row">
    <div class="col-lg-12 control-section">
        <SfToast @ref="ToastObj" ID="toast_type">
            <ToastPosition X="@ToastPosition"></ToastPosition>
        </SfToast>
    </div>
</div>
<SfGrid @ref="DefaultGrid" TValue="View2022UserManagement"
        Toolbar="@(new string[] {"Add","Edit","Delete","Update","Cancel","ColumnChooser"})" AllowGrouping="false" ShowColumnChooser="true" AllowTextWrap="true"
        AllowPaging="true" AllowFiltering="true" GridLines="GridLine.Both" AllowSelection="true">
    <SfDataManager AdaptorInstance="@typeof(AccountManagementAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
    <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Row" Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
    <GridSearchSettings IgnoreCase="true"></GridSearchSettings>
    <GridEvents OnActionBegin="OnActionBegin" OnActionComplete="OnActionComplete" TValue="View2022UserManagement"></GridEvents>
    <GridEditSettings AllowAdding="false" AllowDeleting="false" AllowEditing="true" Mode="@EditMode.Dialog">
        <Template>
            @{
                AccountManagementData = (context as View2022UserManagement);
                <div>
                                <div class="form-row">

                                    <div class="form-group col-md-6">
                                        <SfTextBox ID="AccountHolderName" @bind-Value="@(AccountManagementData.NameOfUserAccountHolder)" Placeholder="Account Holder's Name" FloatLabelType="FloatLabelType.Always"></SfTextBox>
                                    </div>
                                    <div class="form-group col-md-6">
                                        <SfTextBox ID="UserName" @bind-Value="@(AccountManagementData.UserName)" Placeholder="User Name" Enabled="false" FloatLabelType="FloatLabelType.Always"></SfTextBox>
                                    </div>

                                    <div class="form-group col-md-6">
                                        <SfTextBox ID="Email" @bind-Value="@(AccountManagementData.Email)" Placeholder="Email" FloatLabelType="FloatLabelType.Always"></SfTextBox>
                                    </div>

                                    <div class="form-group col-md-6">
                                        <SfTextBox ID="PhoneNumber" @bind-Value="@(AccountManagementData.PhoneNumber)" Placeholder="Phone" FloatLabelType="FloatLabelType.Always"></SfTextBox>
                                    </div>
                                    <div class="form-group col-md-6">
                                        <SfDropDownList ID="RoleName" @bind-Value="@(AccountManagementData.RoleName)" Enabled="true" TItem="AspNetRoles" TValue="string" DataSource="@RolesData" Placeholder="User Role" FloatLabelType="FloatLabelType.Always">
                                            <DropDownListFieldSettings Value="@nameof(AspNetRoles.Name)" Text="@nameof(AspNetRoles.Name)"></DropDownListFieldSettings>
                                        </SfDropDownList>
                                    </div>
                                    @*@if (!String.IsNullOrEmpty(userManagement.GetRoleName()) && userManagement.GetRoleName().ToUpper() != "ADMINISTRATOR" && userManagement.GetRoleName().ToUpper() != "SUPER ADMINISTRATOR")
                                    {*@
                                        <div class="form-group col-md-6">
                                            <SfDropDownList ID="Region" @bind-Value="@(AccountManagementData.RegionId)" Enabled="true" TItem="ARegions" TValue="int?" DataSource="@RegionData" Placeholder="Region" FloatLabelType="FloatLabelType.Always">
                                                <DropDownListFieldSettings Value="@nameof(ARegions.Id)" Text="@nameof(ARegions.LocRegion)"></DropDownListFieldSettings>
                                                <DropDownListEvents TValue="int?" TItem="ARegions" ValueChange="OnRegionChange"></DropDownListEvents>
                                            </SfDropDownList>
                                        </div>
                                        <div class="form-group col-md-6">
                                            <SfDropDownList ID="District" @bind-Value="@(AccountManagementData.DistrictId)" TItem="ADistricts" TValue="int?" DataSource="@DistrictData" Placeholder="District" FloatLabelType="FloatLabelType.Always" Enabled="@EnableDistrictDropDown" Query="@DistricttQuery">
                                                <DropDownListFieldSettings Value="@nameof(ADistricts.Id)" Text="@nameof(ADistricts.LocDistrict)"></DropDownListFieldSettings>
                                            </SfDropDownList>
                                        </div>
                                    @*}*@
                                    <div class="form-group col-md-6">
                                        <div class="form-row">
                                            <div class="form-group col-md-6" style="padding-top:25px;">
                                                <b>Is LockOut Enabled?</b>
                                            </div>
                                            <div class="form-group col-md-6" style="transform:scale(2);padding-top:20px;">
                                                @if (AccountManagementData.LockoutEnabled == true)
                                                {
                                                    <input type="checkbox" id="LockoutEnabled" @bind-value="@AccountManagementData.LockoutEnabled" name="LockoutEnabled" checked="checked" class="e-field e-checkbox" style="width:30px" />
                                                }
                                                else
                                                {
                                                    <input type="checkbox" id="LockoutEnabled" @bind-value="@AccountManagementData.LockoutEnabled" name="LockoutEnabled" class="e-field e-checkbox" style="width:30px" />
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                </div>
            }
        </Template>
    </GridEditSettings>
    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
    <GridPageSettings PageSize="20"></GridPageSettings>
    <GridColumns>
        <GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>
        <GridColumn Field=@nameof(View2022UserManagement.Id) HeaderText="Id" TextAlign="TextAlign.Left" IsPrimaryKey="true" IsIdentity="true" Visible="false" Width="100"></GridColumn>
        <GridColumn Field=@nameof(View2022UserManagement.NameOfUserAccountHolder) HeaderText="AccountHolder's Name" TextAlign="TextAlign.Left" Width="150"></GridColumn>
        <GridColumn Field=@nameof(View2022UserManagement.UserName) HeaderText="UserName" TextAlign="TextAlign.Left" Width="100"></GridColumn>
        <GridColumn Field=@nameof(View2022UserManagement.Email) HeaderText="Email" Width="100"></GridColumn>
        <GridColumn Field=@nameof(View2022UserManagement.RoleName) HeaderText="Role" Visible="true" TextAlign="TextAlign.Left" Width="100"></GridColumn>
        <GridColumn Field=@nameof(View2022UserManagement.PhoneNumber) HeaderText="Phone Number" Visible="true" AllowEditing="false" ShowInColumnChooser="true" Width="100"></GridColumn>
        <GridColumn Field=@nameof(View2022UserManagement.LockoutEnabled) HeaderText="Is Lockout Enabled?" AllowEditing="false" ShowInColumnChooser="true" EditType="EditType.BooleanEdit" Type="Syncfusion.Blazor.Grids.ColumnType.Boolean" Width="100"></GridColumn>

    </GridColumns>
</SfGrid>

@code {
    #region Toasters
    public static string ToastContent { get; set; }
    SfToast ToastObj;
    SfToast DeleteToastObj;
    private string ToastPosition = "Right";
    private int AlarmTimeout { get; set; } = 120000;
    private List<ToastModel> Toast = new List<ToastModel>
{
        new ToastModel{ Title = "Warning!", Content=ToastContent, CssClass="e-toast-warning", Icon="e-warning toast-icons" },
        new ToastModel{ Title = "Success!", Content=ToastContent, CssClass="e-toast-success", Icon="e-success toast-icons" },
        new ToastModel{ Title = "Error!", Content=ToastContent, CssClass="e-toast-danger", Icon="e-error toast-icons" },
        new ToastModel{ Title = "Information!", Content=ToastContent, CssClass="e-toast-info", Icon="e-info toast-icons" }
    };
    #endregion Toasters
    private SfGrid<View2022UserManagement> DefaultGrid;
    //private List<AOperator> operatorData { get; set; }
    private List<AspNetRoles> RolesData { get; set; }
    private View2022UserManagement AccountManagementData { get; set; }
    //List<AResponsibilityLevel> ResponsibilityLevelData { get; set; }
    //List<ADivision> DivisionData { get; set; }
    //List<ADivisionUnit> DivisionUnitData { get; set; }
    List<ACountry> CountryData { get; set; }
    List<ARegions> RegionData { get; set; }
    List<ADistricts> DistrictData { get; set; }
    bool EnableDistrictDropDown { get; set; } = false;
    public Query DistricttQuery { get; set; } = null;

    public void OnRegionChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ARegions> args)
    {
        this.EnableDistrictDropDown = true;
        this.DistricttQuery = new Query().Where(new WhereFilter() { Field = "RegionId", Operator = "equal", value = args.Value, IgnoreCase = false, IgnoreAccent = false });
    }

    #region Header DataSource
    public class AccountManagementAdapter : DataAdaptor
    {
        public IToastService toastService;
        private UserManagement _userManagement;
        SignInManager<IdentityUser> _signInManager;
        UserManager<IdentityUser> _userManager;
        public AccountManagementAdapter(IToastService ts, UserManagement userManagement, SignInManager<IdentityUser> signInManager, UserManager<IdentityUser> userManager)
        {
            _userManagement = userManagement;
            toastService = ts;
            _signInManager = signInManager;
            _userManager = userManager;
        }
        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var data = new List<View2022UserManagement>();
            try
            {
                using (var dbContext = new USAID_ICANContext())
                {
                    data = await dbContext.View2022UserManagement.OrderBy(o => o.NameOfUserAccountHolder).ToListAsync();
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<View2022UserManagement>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }
        public override async Task<Object> InsertAsync(DataManager dataManager, object value, string key)
        {
            try
            {

            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.ToString());
            }
            return value;
        }
        public override async Task<object> RemoveAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {

            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.ToString());
            }


            return value;
        }
        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                using (var dbContext = new USAID_ICANContext())
                {
                    var val = (value as View2022UserManagement);
                    var user = dbContext.AspNetUsers.FirstOrDefault(o => o.Id == val.Id);
                    if (user != null)
                    {
                        user.LockoutEnabled = val.LockoutEnabled;
                        user.NameOfUserAccountHolder = val.NameOfUserAccountHolder;
                        user.UserName = val.UserName;
                        user.Email = val.Email;
                        user.PhoneNumber = val.PhoneNumber;
                        user.RegionId = val.RegionId;
                        user.DistrictId = val.DistrictId;

                        var emailexists = dbContext.AspNetUsers.FirstOrDefault(o => o.Email == val.Email);
                        if (emailexists == null)
                        {
                            user.Email = val.Email;
                            user.NormalizedEmail = val.Email.ToUpper();
                        }

                        dbContext.Entry(user).State = EntityState.Modified;
                        dbContext.SaveChanges();

                        var _user = await _userManager.FindByNameAsync(val.UserName);
                        var oldRole = dbContext.View2022UserManagement.FirstOrDefault(o => o.Id == val.Id).RoleName;
                        var result = await _userManager.RemoveFromRoleAsync(_user, oldRole);
                        if (result.Succeeded)
                        {
                            result = await _userManager.AddToRoleAsync(_user, val.RoleName);
                            if (result.Succeeded)
                            {
                                toastService.ShowSuccess(val.NameOfUserAccountHolder + "'Account has been updated Successfully");
                            }
                            else
                            {
                                string errors = string.Join(",", result.Errors.ToList());
                                toastService.ShowError(errors);
                            }
                        }
                        else
                        {
                            string errors = string.Join(",", result.Errors.ToList());
                            toastService.ShowError(errors);
                        }
                    }

                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.ToString());
            }

            return value;
        }
    }
    public void OnActionBegin(ActionEventArgs<View2022UserManagement> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        {
            this.EnableDistrictDropDown = true;
            DistricttQuery = new Query().Where(new WhereFilter() { Field = "RegionId", Operator = "equal", value = args.RowData.RegionId, IgnoreCase = false, IgnoreAccent = false });

        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        {

        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Cancel)
        {

        }
        //if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        //{
        //    this.OrderGrid.EndEdit();
        //}
    }

    public void OnActionComplete(ActionEventArgs<View2022UserManagement> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            Navigation.NavigateTo("/Account/UserManagementPage", true);
        }
    }

    #endregion Header DataSource
    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (!userManagement.IsSignedIn())
            {
                Navigation.NavigateTo("/", true);
            }
            else
            {
                using(var db = new USAID_ICANContext())
                {
                    RegionData = db.ARegions.ToList();
                    DistrictData = db.ADistricts.ToList();
                    RolesData = db.AspNetRoles.ToList();
                    CountryData = db.ACountry.ToList();
                }
            }

        }
        catch (Exception ex)
        {
            await ToastObj.Show(new ToastModel { Title = "Error!", Content = ex.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
    }
}
