@page "/ExternalResetPasswordPage"
@page "/ExternalResetPasswordPage/{Id}"
@using USAIDICANBLAZOR.Data;
@using USAIDICANBLAZOR.Models;
@using Microsoft.EntityFrameworkCore;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Identity.UI.Services;
@inject NavigationManager NavManager;
@inject UserManager<IdentityUser> _userManager;
<style>
    body {
        margin: 0px;
        padding: 0px;
        background: url(../image/bg.png);
        background-attachment: fixed;
        background-repeat: no-repeat;
        background-size: cover;
        background-position-y: -68px;
        height: 100%;
        background-color: #000 !important;
        /*font-family: 'Roboto', 'Roboto Condensed' !important;*/
        width: 100%;
        overflow-x: hidden !important;
    }

    .center-screen {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        text-align: center;
        min-height: 100vh;
        /*width:40%;*/
    }

    h3 {
        color: #FFBF00;
        font-family: Cambria;
    }

    p {
        word-wrap: break-word;
    }
</style>
<div class="center-screen">
    <div style="width:35%;">
        <h3>Reset Password</h3>
        <p>Please input the new Password you would like to use to access your account</p>
        <EditForm Model="@InputModel" class="signin-form" OnValidSubmit="@ResetPassword">
            <div class="form-group mb-3">
                <label class="label" for="Password" style="color:#96CFF0;float:left;">Password</label>
                <input type="password" @bind-value="@InputModel.Password" class="form-control" placeholder="Password" required>
            </div>
            <div class="form-group mb-3">
                <label class="label" for="ConfirmPassword" style="color:#96CFF0;float:left;">Confirm Password</label>
                <input type="password" @bind-value="@InputModel.ConfirmPassword" class="form-control" placeholder="Confirm Password" required>
            </div>
            <div class="form-group">
                <button type="submit" class="form-control btn btn-primary rounded submit px-3">Reset Password</button>
            </div>
            <DataAnnotationsValidator />
            <ValidationSummary />
        </EditForm>
        <p class="text-center">Do you want to return to the login page? <a data-toggle="tab" href="#" @onclick="@BackToLoginClick">Click here</a></p>
        @if (!string.IsNullOrEmpty(Returnmessage))
        {
            if (Returnmessage.ToLower().Contains("success"))
            {
                <p class="badge badge-success" style="width:100%; padding:15px; font-family:Cambria;font-size:large;">@Returnmessage</p>
            }
            else
            {
                <p class="badge badge-danger" style="width:100%; padding:15px; font-family:Cambria;font-size:large;">@Returnmessage</p>
            }
        }
    </div>
</div>
@code {
    [Parameter]
    public string Id { get; set; }
    private string decriptedSring { get; set; }
    string Returnmessage { get; set; }

    private ResetUserPasswordViewModel InputModel = new ResetUserPasswordViewModel();

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!string.IsNullOrEmpty(Id))
        {
            byte[] b = Convert.FromBase64String(Id);
            decriptedSring = System.Text.ASCIIEncoding.ASCII.GetString(b);
        }
        return base.OnAfterRenderAsync(firstRender);
    }
    protected override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(Id))
        {
            byte[] b = Convert.FromBase64String(Id);
            decriptedSring = System.Text.ASCIIEncoding.ASCII.GetString(b);
            using (var db = new USAID_ICANContext())
            {
                var exists = db.AspNetUsers.FirstOrDefault(o => o.Id == decriptedSring);
                if (exists != null)
                {
                    InputModel.UserId = decriptedSring;
                    InputModel.Username = exists.UserName;
                }
            }
        }
        base.OnInitialized();
    }
    private async Task ResetPassword()
    {
        try
        {
            var user = await _userManager.FindByNameAsync(InputModel.Username);
            var result = await _userManager.RemovePasswordAsync(user);
            if (result.Succeeded)
            {
                var _result = await _userManager.AddPasswordAsync(user, InputModel.Password);
                if (_result.Succeeded)
                {
                    Returnmessage = "Success: the password to your account was successfully reset";
                }
                else
                {
                    string error = string.Join(",", result.Errors.ToList());
                    Returnmessage = "Error: " + error;
                }
            }
            else
            {
                string error = string.Join(",", result.Errors.ToList());
                Returnmessage = "Error: "+ error;
            }

        }
        catch (Exception ex)
        {
            Returnmessage = "Error: something went wrong when processing your request, please try again later or contact the administrator.";
        }
        StateHasChanged();
    }
    private void BackToLoginClick()
    {
        NavManager.NavigateTo("/", true);
    }
}
