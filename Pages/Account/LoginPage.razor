@page "/"
@using USAIDICANBLAZOR.Data;
@using Microsoft.EntityFrameworkCore;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Identity.UI.Services;
@using USAIDICANBLAZOR.Models;
@using Microsoft.Extensions.Logging;
@inject NavigationManager NavManager;
@inject IJSRuntime JS;
@inject SignInManager<IdentityUser> _signInManager;
@inject UserManager<IdentityUser> _userManager;
@inject ILogger<LoginPage> _logger;
@inject UserManagement userManagement;

<style>
    /*body {
        margin: 0px;
        padding: 0px;
        background: url(../image/BackgroundImage.png);
        background-attachment: fixed;
        background-repeat: repeat;
        background-size: cover;
        background-position-y: -68px;
        height: 100%;
        background-color: #000 !important;*/
    /*font-family: 'Roboto', 'Roboto Condensed' !important;*/
    /*width: 100%;
        overflow-x: hidden !important;
    }*/
    .carousel {
        position: relative;
        /*margin-top: -5.5vh;
        margin-left: -2rem;
        margin-right: -1.5rem;*/
        height: 100vh;
    }

    h3 {
        color: #FFBF00;
        font-family: Cambria;
    }

    .wrap {
        /*background: #fff0;*/
        /*background-color: transparent;*/
        background-color: rgba(0, 0, 0, 0.4);
    }

    .centerImage {
        display: block;
        margin-left: auto;
        margin-right: auto;
        /*width: 50%;*/
    }

    .circle {
        /*width: 60%;
        height: 40vh;
        position: absolute;
        opacity: 0.3;*/
        /*border-radius: 100%;*/
        /*background-color: red;
        display: block;
        margin-left: auto;
        margin-right: auto;
        z-index: 200;*/

        position: absolute;
        /*background-color: rgba(0, 0, 0, 0.4);*/
        /*opacity: 0.2;*/
        display: flex;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
        margin: auto;
        /*max-height: 80vh;*/
        width: 80%;
        z-index: 200;
    }
    .maindiv {
        position: relative;
        margin-top: -5.5vh;
        margin-left: -2rem;
        margin-right: -1.5rem;
        height: 100vh;
    }
</style>

<div class="maindiv">
    <div class="circle">
        <div class="container">
            <div class="row justify-content-center">
                <div class="col-md-6 text-center mb-5">
                    <h3 class="heading-section">
                    </h3>
                </div>
            </div>
            <div class="row justify-content-center">
                <div class="col-md-12 col-lg-10">
                    <div class="wrap d-md-flex">
                        <div class="img">
                            <img src="/Login/images/FinalICANLogo.jpg" width="400px" height="100" style="margin-top:10vh;" class="centerImage" />
                        </div>
                        <div class="login-wrap p-4 p-md-5">
                            <div class="d-flex">
                                <div class="w-100">
                                    <h3 class="mb-4">Sign In</h3>
                                </div>
                                <div class="w-100" hidden>
                                    <p class="social-media d-flex justify-content-end">
                                        <a href="#" class="social-icon d-flex align-items-center justify-content-center"><span class="fa fa-facebook"></span></a>
                                        <a href="#" class="social-icon d-flex align-items-center justify-content-center"><span class="fa fa-twitter"></span></a>
                                    </p>
                                </div>
                            </div>

                            <EditForm Model="@InputModel" class="signin-form" OnValidSubmit="@LoginUser">
                                <div class="form-group mb-3">
                                    <label class="label" for="Email" style="color:#96CFF0;">Username</label>
                                    <input type="text" @bind-value="@InputModel.Email" class="form-control" placeholder="Username" required>
                                </div>
                                <div class="form-group mb-3">
                                            <label class="label" for="password" style="color:#96CFF0;">Password</label>
                                    <div class="row">
                                        <div class="col-md-9">
                                    <input type="@TxtType" @bind-value="@InputModel.Password" class="form-control" placeholder="Password" required>
                                        </div>
                                        <div class="col-md-3">
                                            <button type="button" class="btn-primary btn-block" @onclick="@ShowPassword">Show</button>
                                        </div>
                                    </div>
                                    
                                </div>

                                <div class="form-group mb-3">
                                    <label class="checkbox-wrap checkbox-primary mb-0">
                                        Remember Me
                                        <input type="checkbox" @bind-value="@InputModel.RememberMe">
                                        <span class="checkmark"></span>
                                    </label>
                                </div>
                                <div class="form-group">
                                    <SfSpinner Size="40" Label="Logging you in please wait..." Type="SpinnerType.Material" Visible="@InputModel.Isbusy" CssClass="e-customClass"></SfSpinner>
                                </div>
                                <div class="form-group">
                                    @if (InputModel.Isbusy == false)
                                    {
                                        <button type="submit" class="form-control btn btn-primary rounded submit px-3">Sign In</button>
                                    }
                                    else
                                    {
                                        <button type="submit" disabled class="form-control btn btn-primary rounded submit px-3">Sign In</button>
                                    }

                                </div>

                                @if (!string.IsNullOrEmpty(Errormsg))
                                {
                                    <p class="badge badge-danger" style="margin:10px;">@Errormsg</p>
                                }
                                <DataAnnotationsValidator />
                                <ValidationSummary />
                            </EditForm>
                            <div class="form-group d-md-flex">
                                <div class="w-50 text-left">
                                    <a href="#" @onclick="ForgotPasswordclick" style="color: #FFBF00;">Forgot Password</a>
                                </div>
                                <div class="w-50 text-md-right" hidden>
                                    <p class="text-center">Not a member? <a data-toggle="tab" href="#" @onclick="@signUpclick" style="color: #FFBF00;">Sign Up</a></p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <div id="carouselExampleIndicators"
         class="carousel slide" data-ride="carousel">
        <ol class="carousel-indicators">
            <li data-target="#carouselExampleIndicators" data-slide-to="0" class="active"></li>
            <li data-target="#carouselExampleIndicators" data-slide-to="1"></li>
            <li data-target="#carouselExampleIndicators" data-slide-to="2"></li>
            <li data-target="#carouselExampleIndicators" data-slide-to="3"></li>
            <li data-target="#carouselExampleIndicators" data-slide-to="4"></li>
        </ol>
        <div class="carousel-inner">
            <div class="carousel-item active">
                <img class="d-block w-100" style="height:100vh;" src="/Login/images/AGYWGulu.jpg" alt="Memberstates flags">
            </div>
            <div class="carousel-item">
                <img class="d-block w-100" style="height:100vh;" src="/Login/images/AGYW.jpg" alt="Renewable Energy">
            </div>
            <div class="carousel-item">
                <img class="d-block w-100" style="height:100vh;" src="/Login/images/Karamojong.jpg" alt="bushtracks express bridge">
            </div>
            <div class="carousel-item">
                <img class="d-block w-100" style="height:100vh;" src="/Login/images/Elder.jpg" alt="Infrastructure">
            </div>
        </div>
        <a id="carouselExampleIndicators-prev"
           class="carousel-control-prev" role="button" data-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="sr-only">Previous</span>
        </a>
        <a id="carouselExampleIndicators-next"
           class="carousel-control-next" role="button" data-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="sr-only">Next</span>
        </a>
    </div>
</div>


<!--<section class="ftco-section">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-6 text-center mb-5">
                <h3 class="heading-section">
                </h3>
            </div>
        </div>
        <div class="row justify-content-center" style="background-color: rgba(0, 0, 0, 0.4);">
            <div class="col-md-12 col-lg-10">
                <div class="wrap d-md-flex">
                    <div class="img">-->
                        @*<h3 style="color: #FFBF00; margin:10px;">USAIDICANBLAZOR M&E System</h3>*@
                        <!--<img src="/Login/images/FinalICANLogo.jpg" style="width:500px;margin-top:18vh;" class="centerImage" />

                    </div>
                    <div class="login-wrap p-4 p-md-5">
                        <div class="d-flex">
                            <div class="w-100">
                                <h3 class="mb-4">Sign In</h3>
                            </div>
                            <div class="w-100">
                                <p class="social-media d-flex justify-content-end">
                                    <a href="#" class="social-icon d-flex align-items-center justify-content-center"><span class="fa fa-facebook"></span></a>
                                    <a href="#" class="social-icon d-flex align-items-center justify-content-center"><span class="fa fa-twitter"></span></a>
                                </p>
                            </div>
                        </div>

                        <EditForm Model="@InputModel" class="signin-form" OnValidSubmit="@LoginUser">
                            <div class="form-group mb-3">
                                <label class="label" for="Email" style="color:#96CFF0;">Username</label>
                                <input type="text" @bind-value="@InputModel.Email" class="form-control" placeholder="Username" required>
                            </div>
                            <div class="form-group mb-3">
                                <label class="label" for="password" style="color:#96CFF0;">Password</label>
                                <input type="password" @bind-value="@InputModel.Password" class="form-control" placeholder="Password" required>
                            </div>
                            <div class="form-group mb-3">
                                <label class="checkbox-wrap checkbox-primary mb-0">
                                    Remember Me
                                    <input type="checkbox" @bind-value="@InputModel.RememberMe">
                                    <span class="checkmark"></span>
                                </label>
                            </div>
                            <div class="form-group">
                                <SfSpinner Size="40" Label="Logging you in please wait..." Type="SpinnerType.Material" Visible="@InputModel.Isbusy" CssClass="e-customClass"></SfSpinner>
                            </div>
                            <div class="form-group">
                                @if (InputModel.Isbusy == false)
                                {
                                    <button type="submit" class="form-control btn btn-primary rounded submit px-3">Sign In</button>
                                }
                                else
                                {
                                    <button type="submit" disabled class="form-control btn btn-primary rounded submit px-3">Sign In</button>
                                }

                            </div>

                            @if (!string.IsNullOrEmpty(Errormsg))
                            {
                                <p class="badge badge-danger" style="margin:10px;">@Errormsg</p>
                            }
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                        </EditForm>
                        <div class="form-group d-md-flex">
                            <div class="w-50 text-left" hidden>
                                <p class="text-center">Not a member? <a data-toggle="tab" href="#" @onclick="@signUpclick" style="color: #FFBF00;">Sign Up</a></p>
                            </div>
                            <div class="w-50 text-md-right">
                                <a href="#" @onclick="ForgotPasswordclick" style="color: #FFBF00;">Forgot Password</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div id="carouselExampleIndicators"
             class="carousel slide" data-ride="carousel">
            <ol class="carousel-indicators">
                <li data-target="#carouselExampleIndicators" data-slide-to="0" class="active"></li>
                <li data-target="#carouselExampleIndicators" data-slide-to="1"></li>
                <li data-target="#carouselExampleIndicators" data-slide-to="2"></li>
                <li data-target="#carouselExampleIndicators" data-slide-to="3"></li>
                <li data-target="#carouselExampleIndicators" data-slide-to="4"></li>
            </ol>
            <div class="carousel-inner">
                <div class="carousel-item active"></div>
                    <img class="d-block w-100" style="height:100vh;" src="/image/Background.jpg" alt="Memberstates flags">
                </div>
                <div class="carousel-item">
                    <img class="d-block w-100" style="height:100vh;" src="/image/DSC_0110-scaled.jpg" alt="Renewable Energy">
                </div>
                <div class="carousel-item">
                    <img class="d-block w-100" style="height:100vh;" src="/image/bushtracks-express-bridge-aerial.jpg" alt="bushtracks express bridge">
                </div>
                <div class="carousel-item">
                    <img class="d-block w-100" style="height:100vh;" src="/image/Infra.png" alt="Infrastructure">
                </div>
                <div class="carousel-item">
                    <img class="d-block w-100" style="height:100vh;" src="/image/ComesaMarket.jpg" alt="Comesa Market">
                </div>
            </div>
            <a id="carouselExampleIndicators-prev"
               class="carousel-control-prev" role="button" data-slide="prev">
                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                <span class="sr-only">Previous</span>
            </a>
            <a id="carouselExampleIndicators-next"
               class="carousel-control-next" role="button" data-slide="next">
                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                <span class="sr-only">Next</span>
            </a>
        </div>
    </div>
</section>-->

@code {
    string Errormsg { get; set; }
    private LoginViewModel InputModel = new LoginViewModel();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeAsync<object>("initializeCarousel");
        }
        await base.OnAfterRenderAsync(firstRender);
        // return await base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Errormsg = string.Empty;
            if (userManagement.IsSignedIn())
            {
                string currentUrl = NavManager.Uri + "api/LoginAPI";
                var text = await JS.InvokeAsync<string>("Logout",currentUrl);
            }
            InputModel.Isbusy = false;
        }
        catch (Exception ex)
        {
            _logger.LogInformation("Login Error:-" + ex.ToString());
            Errormsg = ex.Message;
        }
    }
    private async Task LoginUser()
    {
        try
        {
            InputModel.Isbusy = true;
            Errormsg = string.Empty;
            string email = string.Empty;
            using (var dbContext = new USAID_ICANContext())
            {
                var exist = dbContext.AspNetUsers.FirstOrDefault(o => o.Email == InputModel.Email || o.UserName == InputModel.Email);
                if (exist != null)
                {
                    if (exist.LockoutEnabled)
                    {
                        Errormsg = "This account has been locked out, Please contact your administrator for re-activation.";
                        InputModel.Isbusy = false;
                    }
                    else
                    {
                        email = exist.UserName;
                        InputModel.Email = exist.UserName;
                        string currentUrl = NavManager.Uri + "api/LoginAPI";
                        var result = await JS.InvokeAsync<Microsoft.AspNetCore.Identity.SignInResult>("Login", InputModel.Email, InputModel.Password, InputModel.RememberMe, currentUrl);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            _logger.LogInformation("Login Error:-" + ex.ToString());
            Errormsg = ex.Message;
        }
        StateHasChanged();
    }
    private void signUpclick()
    {
        NavManager.NavigateTo("ExternalRegistrationPage", true);
    }
    private void ForgotPasswordclick()
    {
        NavManager.NavigateTo("ForgotPasswordPage", true);
    }

    public string TxtType = "password";

    public void ShowPassword()
    {
        if (this.TxtType == "password")
        {
            this.TxtType = "text";
        }
        else
        {
            this.TxtType = "password";
        }
    }
}
