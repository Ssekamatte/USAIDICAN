@page "/Account/RegisterUserPage"
@using USAIDICANBLAZOR.Data;
@using USAIDICANBLAZOR.Models;
@using Microsoft.EntityFrameworkCore;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Identity.UI.Services;
@inject NavigationManager NavManager;
@inject UserManager<IdentityUser> _userManager;
@using System.Net;
@using System.Net.Mail;
<style>
    /*body {
        margin: 0px;
        padding: 0px;
        background: url(../image/bg.png);
        background-attachment: fixed;
        background-repeat: no-repeat;
        background-size: cover;
        background-position-y: -68px;
        height: 100%;
        background-color: #000 !important;*/
        /*font-family: 'Roboto', 'Roboto Condensed' !important;*/
        /*width: 100%;
        overflow-x: hidden !important;
    }

    h3 {
        color: #FFBF00;
        font-family: Cambria;
    }

    p {
        word-wrap: break-word;
    }*/
</style>
<ol class="breadcrumb">
    <li class="breadcrumb-item active" style="width: 100%; background-color: #9DCE5C; color: ghostwhite; font-family: Cambria; padding: 5px; font: bolder;"><strong> Register </strong></li>
</ol>
<div class="row">
    <div class="col-lg-12 control-section">
        <SfToast @ref="ToastObj" ID="toast_type">
            <ToastPosition X="@ToastPosition"></ToastPosition>
        </SfToast>
    </div>
</div>
<EditForm Model="@InputModel" class="form-row" style="margin-left:10%; margin-right:10%;" OnValidSubmit="@RegisterUser">
    <div class="form-group col-md-6">
        <label class="label" for="AccountHolderName" style="float:left;">Name</label>
        <input type="text" id="AccountHolderName" name="AccountHolderName" @bind-value="@InputModel.AccountHolderName" class="form-control" placeholder="Name" required>
    </div>
    <div class="form-group col-md-6">
        <label class="label" for="ConfirmPassword" style="float:left;">Email</label>
        <input type="email" name="Email" id="Email" @bind-value="@InputModel.Email" class="form-control" placeholder="Email" required>
    </div>
    <div class="form-group col-md-6">
        <label class="label" for="PhoneNumber" style="float:left;">Phone Number</label>
        <input type="tel" id="PhoneNumber" name="PhoneNumber" @bind-value="@InputModel.PhoneNumber" class="form-control" placeholder="Phone Number" required>
    </div>
    <div class="form-group col-md-6">
        <label class="label" for="UserName" style="float:left;">User Name</label>
        <input type="text" name="UserName" id="UserName" @bind-value="@InputModel.UserName" class="form-control" placeholder="User Name" required>
    </div>
    <div class="form-group col-md-6">
        <label class="label" for="UserRole" style="float:left;">User Role</label>
        <SfDropDownList ID="UserRole" @bind-Value="InputModel.UserRole" TValue="string" TItem="AspNetRoles" Width="100%" DataSource="@UserRoleData" Placeholder="User Role" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
            <DropDownListFieldSettings Text="@(nameof(AspNetRoles.Name))" Value="@nameof(AspNetRoles.NormalizedName)"></DropDownListFieldSettings>
        </SfDropDownList>
    </div>

    @if (!String.IsNullOrEmpty(InputModel.UserRole) && InputModel.UserRole.ToUpper() != "ADMINISTRATOR" && InputModel.UserRole.ToUpper() != "SUPER ADMINISTRATOR")
    {
        <div class="form-group col-md-6">
            <label class="label" for="RegionId" style="float:left;">Region</label>
            <SfDropDownList ID="RegionId" @bind-Value="InputModel.RegionId" TValue="int?" TItem="ARegions" Width="100%" DataSource="@RegionData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                <DropDownListFieldSettings Text="@(nameof(ARegions.LocRegion))" Value="@nameof(ARegions.Id)"></DropDownListFieldSettings>
                <DropDownListEvents TValue="int?" TItem="ARegions" ValueChange="OnRegionChange"></DropDownListEvents>
            </SfDropDownList>
        </div>

        <div class="form-group col-md-6">
            <label class="label" for="DistrictId" style="float:left;">District</label>
            <SfDropDownList ID="DistrictId" @bind-Value="InputModel.DistrictId" TValue="int?" TItem="ADistricts" Enabled="@EnableDistrictDropDown" Width="100%" DataSource="@DistrictData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" Query="@DistricttQuery">
                <DropDownListFieldSettings Text="@(nameof(ADistricts.LocDistrict))" Value="@nameof(ADistricts.Id)"></DropDownListFieldSettings>
            </SfDropDownList>
        </div>
    }

    @*<div class="form-group col-md-6">
            <label class="label" for="RegionId" style="float:left;">Region</label>
            <SfDropDownList ID="RegionId" @bind-Value="InputModel.RegionId" TValue="int?" TItem="ARegions" Width="100%" DataSource="@RegionData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                <DropDownListFieldSettings Text="@(nameof(ARegions.LocRegion))" Value="@nameof(ARegions.Id)"></DropDownListFieldSettings>
                <DropDownListEvents TValue="int?" TItem="ARegions" ValueChange="OnRegionChange"></DropDownListEvents>
            </SfDropDownList>
        </div>

        <div class="form-group col-md-6">
            <label class="label" for="DistrictId" style="float:left;">District</label>
            <SfDropDownList ID="DistrictId" @bind-Value="InputModel.DistrictId" TValue="int?" TItem="ADistricts" Enabled="@EnableDistrictDropDown" Width="100%" DataSource="@DistrictData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true"  Query="@DistricttQuery">
                <DropDownListFieldSettings Text="@(nameof(ADistricts.LocDistrict))" Value="@nameof(ADistricts.Id)"></DropDownListFieldSettings>
            </SfDropDownList>
        </div>*@

    <div class="form-group col-md-12"></div>
    <div class="form-group col-md-6">
        <label class="label" for="Password" style="float:left;">Password</label>
        <input type="password" @bind-value="@InputModel.Password" class="form-control" placeholder="Password" required>
    </div>
    <div class="form-group col-md-6">
        <label class="label" for="ConfirmPassword" style="float:left;">Confirm Password</label>
        <input type="password" @bind-value="@InputModel.ConfirmPassword" class="form-control" placeholder="Confirm Password" required>
    </div>
    <div class="form-group col-md-6">
    </div>
    <div class="form-group col-md-6">
        <button type="submit" class="form-control btn btn-primary rounded submit px-3">Register User</button>
    </div>
    <DataAnnotationsValidator />
    <ValidationSummary />
</EditForm>
@code {
    #region Toasters
    public static string ToastContent { get; set; }
    SfToast ToastObj;
    SfToast DeleteToastObj;
    private string ToastPosition = "Right";
    private int AlarmTimeout { get; set; } = 120000;
    private List<ToastModel> Toast = new List<ToastModel>
{
        new ToastModel{ Title = "Warning!", Content=ToastContent, CssClass="e-toast-warning", Icon="e-warning toast-icons" },
        new ToastModel{ Title = "Success!", Content=ToastContent, CssClass="e-toast-success", Icon="e-success toast-icons" },
        new ToastModel{ Title = "Error!", Content=ToastContent, CssClass="e-toast-danger", Icon="e-error toast-icons" },
        new ToastModel{ Title = "Information!", Content=ToastContent, CssClass="e-toast-info", Icon="e-info toast-icons" }
    };
    #endregion Toasters

    private RegisterViewModel InputModel = new RegisterViewModel();
    List<AspNetRoles> UserRoleData { get; set; }

    List<ARegions> RegionData { get; set; }
    List<ADistricts> DistrictData { get; set; }

    bool EnableDistrictDropDown { get; set; } = false;
    public Query DistricttQuery { get; set; } = null;

    public void OnRegionChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ARegions> args)
    {
        this.EnableDistrictDropDown = true;
        this.DistricttQuery = new Query().Where(new WhereFilter() { Field = "RegionId", Operator = "equal", value = args.Value, IgnoreCase = false, IgnoreAccent = false });
    }

    //public void OnRegionChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ARegions> args)
    //{
    //    //var objtype = args.ItemData.PillarId;
    //    //if (args.ItemData.PillarId == 6)
    //    //{
    //    //    goalsobj.ObjectiveTypeId = 1;
    //    //    isEnabled = false;
    //    //    isEnabledGoalDesc = true;
    //    //}
    //    //else
    //    //{
    //    //    goalsobj.ObjectiveTypeId = 2;
    //    //    isEnabled = true;
    //    //    isEnabledGoalDesc = true;
    //    //}

    //    using (var db = new USAID_ICANContext())
    //    {
    //        var regiondata = args.ItemData;
    //        if (regiondata != null)
    //        {
    //            DistrictData = db.ADistricts.Where(o => args.Value.Any(a => a == o.RegionId) == true).ToList();
    //            isEnabled = true;
    //        }
    //    }
    //}


    protected override void OnInitialized()
    {
        using(var db = new USAID_ICANContext())
        {
            UserRoleData = db.AspNetRoles.ToList();
            RegionData = db.ARegions.ToList();
            DistrictData = db.ADistricts.ToList();
        }
        base.OnInitialized();
    }
    private async Task RegisterUser()
    {
        try
        {
            var user = new ApplicationUser { UserName = InputModel.UserName, Email = InputModel.Email, PhoneNumber = InputModel.PhoneNumber, LockoutEnabled = false, AccountHolderName = InputModel.AccountHolderName };
            var result = await _userManager.CreateAsync(user, InputModel.Password);
            if (result.Succeeded)
            {
                var _result = await _userManager.AddToRoleAsync(user, InputModel.UserRole);

                if (_result.Succeeded)
                {
                    string url = NavManager.BaseUri;
                    var code = await _userManager.GenerateEmailConfirmationTokenAsync(user);

                    using (var dbContext = new USAID_ICANContext())
                    {
                        //double id = 1;
                        //var _last = dbContext.AspNetEmailConfirmationCode.ToList().LastOrDefault();
                        //if (_last != null)
                        //{
                        //    id = (_last.ConfirmationId + 1);
                        //}
                        var exist = dbContext.AspNetUsers.FirstOrDefault(o => o.Id == user.Id);
                        if (exist != null)
                        {
                            //exist.StaffId = InputModel.StaffId;
                            // exist.AccountHolderName = InputModel.AccountHolderName;
                            //exist.EmailConfirmed = true;
                            //exist.LockoutEnabled = false;
                            //exist.ResponsibilityLevelId = InputModel.ResponsibilityLevelId;
                            exist.NameOfUserAccountHolder = InputModel.UserName;
                            exist.DistrictId = InputModel.DistrictId;
                            exist.RegionId = InputModel.RegionId;
                            exist.PhoneNumberConfirmed = true;
                            dbContext.Entry(exist).State = EntityState.Modified;
                            dbContext.SaveChanges();
                        }
                    }

                    await _userManager.ConfirmEmailAsync(user, code);

                    await _userManager.SetLockoutEnabledAsync(user, false);


                    await ToastObj.Show(new ToastModel { Title = "Success!", Content = InputModel.AccountHolderName + " has been successfully registered!", CssClass = "e-toast-success", Icon = "e-success toast-icons" });
                    InputModel = new RegisterViewModel();
                }
                else
                {
                    string _error = string.Empty;
                    foreach (var error in _result.Errors)
                    {
                        // ModelState.AddModelError(string.Empty, error.Description);
                        _error += error.Description + ",";
                    }
                    await ToastObj.Show(new ToastModel { Title = "Error!", Content = _error, CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                }

            }
            else
            {
                string _error = string.Empty;
                foreach (var error in result.Errors)
                {
                    // ModelState.AddModelError(string.Empty, error.Description);
                    _error += error.Description + ",";
                }
                await ToastObj.Show(new ToastModel { Title = "Error!", Content = _error, CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
            }
        }
        catch (Exception ex)
        {
            await ToastObj.Show(new ToastModel { Title = "Error!", Content = ex.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
    }
}

