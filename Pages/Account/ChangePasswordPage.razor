@page "/Account/ChangePasswordPage";
@using Microsoft.EntityFrameworkCore;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Identity.UI.Services;
@using USAIDICANBLAZOR.Models;
@using Microsoft.Extensions.Logging;
@using USAIDICANBLAZOR.Data;
@inject UserManager<IdentityUser> _userManager;
@inject ILogger<ChangePasswordPage> _logger;
@inject NavigationManager Navigation;
@inject UserManagement userManagement;
<ol class="breadcrumb" style="margin-top:5px;">
    <li class="breadcrumb-item active" style="width: 100%; background-color: #9DCE5C; color: ghostwhite; font-family: Cambria; padding: 5px; font: bolder;"><strong> Change Password </strong></li>
</ol>
<div class="row">
    <div class="col-lg-12 control-section">
        <SfToast @ref="ToastObj" ID="toast_type">
            <ToastPosition X="@ToastPosition"></ToastPosition>
        </SfToast>
    </div>
</div>
<EditForm Model="@InputModel" OnValidSubmit="@ResetPassword">
    <div class="row">
        <div class="col-md-3"></div>
        <div class="col-md-6">
            <div class="form-group">
                <SfTextBox ID="UserName" Enabled="false" @bind-Value="InputModel.UserName" Placeholder="User Name" FloatLabelType="FloatLabelType.Always" />
            </div>
            <div class="form-group">
                <SfTextBox ID="oldPassword" @bind-Value="InputModel.oldPassword" Placeholder="Old Password" FloatLabelType="FloatLabelType.Always" />
            </div>
            <div class="form-group">
                <SfTextBox ID="Password" @bind-Value="InputModel.Password" Placeholder="New Password" FloatLabelType="FloatLabelType.Always" />
            </div>
            <div class="form-group">
                <SfTextBox ID="ConfirmPassword" @bind-Value="InputModel.ConfirmPassword" Placeholder="Confirm Password" FloatLabelType="FloatLabelType.Always" />
            </div>
            <div class="form-group">
                <button class="btn btn-primary btn-lg" style="float:right" type="submit">Change Password</button>
            </div>
            <DataAnnotationsValidator />
            <ValidationSummary />
        </div>
        <div class="col-md-3"></div>
    </div>
</EditForm>

@code {
    #region Toasters
    public static string ToastContent { get; set; }
    SfToast ToastObj;
    SfToast DeleteToastObj;
    private string ToastPosition = "Right";
    private int AlarmTimeout { get; set; } = 120000;
    private List<ToastModel> Toast = new List<ToastModel>
{
        new ToastModel{ Title = "Warning!", Content=ToastContent, CssClass="e-toast-warning", Icon="e-warning toast-icons" },
        new ToastModel{ Title = "Success!", Content=ToastContent, CssClass="e-toast-success", Icon="e-success toast-icons" },
        new ToastModel{ Title = "Error!", Content=ToastContent, CssClass="e-toast-danger", Icon="e-error toast-icons" },
        new ToastModel{ Title = "Information!", Content=ToastContent, CssClass="e-toast-info", Icon="e-info toast-icons" }
    };
    #endregion Toasters
    private ResetPasswordViewModel InputModel = new ResetPasswordViewModel();
    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (!userManagement.IsSignedIn())
            {
                Navigation.NavigateTo("/", true);
            }
            else
            {
                InputModel.UserName = userManagement.GetUserName();
            }
        }
        catch (Exception ex)
        {
            await ToastObj.Show(new ToastModel { Title = "Error!", Content = ex.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
    }

    private async void ResetPassword()
    {
        try
        {
            var user = await _userManager.FindByNameAsync(InputModel.UserName);
            if (user != null)
            {
                var result = await _userManager.ChangePasswordAsync(user, InputModel.oldPassword, InputModel.Password);
                if (result.Succeeded)
                {
                    await ToastObj.Show(new ToastModel { Title = "Success!", Content = "Your Password was successfully Changed", CssClass = "e-toast-success", Icon = "e-success toast-icons" });
                }
                else
                {
                    string Errors = string.Join(",", result.Errors.ToList());
                    await ToastObj.Show(new ToastModel { Title = "Error!", Content = Errors, CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                }
            }
        }
        catch (Exception ex)
        {
            await ToastObj.Show(new ToastModel { Title = "Error!", Content = ex.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
    }
}
