@page "/Account/ChangeUserPasswordPage";
@using Microsoft.EntityFrameworkCore;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Identity.UI.Services;
@using USAIDICANBLAZOR.Models;
@using Microsoft.Extensions.Logging;
@using USAIDICANBLAZOR.Data;
@using System.IO;
@using System.Collections;
@inject UserManager<IdentityUser> _userManager;
@inject NavigationManager Navigation;
@inject UserManagement userManagement;

<style>
    #target {
        min-height: 200px;
    }
</style>
<ol class="breadcrumb" style="margin-top:5px;">
    <li class="breadcrumb-item active" style="width: 100%; background-color: #9DCE5C; color: ghostwhite; font-family: Cambria; padding: 5px; font: bolder;"><strong> Manage User Passwords </strong></li>
</ol>
<div class="row">
    <div class="col-lg-12 control-section">
        <SfToast @ref="ToastObj" ID="toast_type">
            <ToastPosition X="@ToastPosition"></ToastPosition>
        </SfToast>
    </div>
</div>

<SfGrid @ref="UserGrid" TValue="AspNetUsers" GridLines="GridLine.Both"
        Toolbar="@(new List<string>() { "ColumnChooser" })" AllowPaging="true" Width="auto" Height="auto"
        ShowColumnChooser="true" EnableAltRow="true" AllowFiltering="true" AllowTextWrap="true"
        EnableHover="true" AllowSorting="true" AllowSelection="true">
    <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Both"></GridSelectionSettings>
    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
    <SfDataManager AdaptorInstance="@typeof(AspNetUsersAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
    <GridEditSettings AllowAdding="false" AllowDeleting="false" AllowEditing="false" ShowConfirmDialog="false" Mode="EditMode.Batch"></GridEditSettings>
    <GridPageSettings PageSize="20"></GridPageSettings>
    <GridColumns>
        <GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>
        <GridColumn Field=@nameof(AspNetUsers.Id) Visible="false" HeaderTextAlign="TextAlign.Left" ShowInColumnChooser="false" HeaderText="Id" Width="100"></GridColumn>
        <GridColumn Field=@nameof(AspNetUsers.NameOfUserAccountHolder) ShowInColumnChooser="true" HeaderTextAlign="TextAlign.Left" AllowEditing="true" HeaderText="Account Holder's Name" Width="200"></GridColumn>
        <GridColumn Field=@nameof(AspNetUsers.UserName) HeaderText="User Name" HeaderTextAlign="TextAlign.Left" AllowEditing="true" ShowInColumnChooser="true" Width="100"></GridColumn>
        <GridColumn Field=@nameof(AspNetUsers.Email) HeaderText="Email" HeaderTextAlign="TextAlign.Left" AllowEditing="false" ShowInColumnChooser="true" Width="100"></GridColumn>
    </GridColumns>
</SfGrid>
<div style="margin-top:15px; margin-left:84%;">
    <BSButton Color="Color.Primary" OnClick="@OnViewRecord" Class="buttonClass">Reset User Password</BSButton>
</div>


<SfDialog Height="55%" Width="435px" AllowDragging="true" Target="#target" ShowCloseIcon="true" @bind-Visible="BatchVisibility">
    <DialogTemplates>
        <Header>
            <div id="template" title="Request Stock" class="e-icon-settings">Reset Password</div>
        </Header>
        <Content>
            <div style="padding:25px">
                <EditForm Model="@InputModel" OnValidSubmit="@onComfirmResetBtnclick">
                    <div class="form-row">
                        <div class="form-group col-md-12">
                            <SfTextBox ID="Username" Enabled="false" @bind-Value="InputModel.Username" Placeholder="User Name" FloatLabelType="FloatLabelType.Always" />
                        </div>
                        <div class="form-group col-md-12" hidden>
                            <SfTextBox ID="UserId" @bind-Value="InputModel.UserId" Placeholder="User Id" FloatLabelType="FloatLabelType.Always" />
                        </div>
                        <div class="form-group col-md-12">
                            <SfTextBox ID="Password" @bind-Value="InputModel.Password" Placeholder="New Password" FloatLabelType="FloatLabelType.Always" />
                        </div>
                        <div class="form-group col-md-12">
                            <SfTextBox ID="ConfirmPassword" @bind-Value="InputModel.ConfirmPassword" Placeholder="Confirm Password" FloatLabelType="FloatLabelType.Always" />
                        </div>
                        <div class="form-group col-md-12">
                            <BSButton Color="Color.Primary" ButtonType="BlazorStrap.ButtonType.Submit" Class="buttonClass">Reset Password</BSButton>
                        </div>
                    </div>
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                </EditForm>
            </div>
        </Content>
        @*<FooterTemplate>

            </FooterTemplate>*@
    </DialogTemplates>
</SfDialog>

@code {
    #region Toasters
    public static string ToastContent { get; set; }
    SfToast ToastObj;
    SfToast DeleteToastObj;
    private string ToastPosition = "Right";
    private int AlarmTimeout { get; set; } = 120000;
    private List<ToastModel> Toast = new List<ToastModel>
{
        new ToastModel{ Title = "Warning!", Content=ToastContent, CssClass="e-toast-warning", Icon="e-warning toast-icons" },
        new ToastModel{ Title = "Success!", Content=ToastContent, CssClass="e-toast-success", Icon="e-success toast-icons" },
        new ToastModel{ Title = "Error!", Content=ToastContent, CssClass="e-toast-danger", Icon="e-error toast-icons" },
        new ToastModel{ Title = "Information!", Content=ToastContent, CssClass="e-toast-info", Icon="e-info toast-icons" }
    };
    #endregion Toasters
    private SfGrid<AspNetUsers> UserGrid;
    private ResetUserPasswordViewModel InputModel = new ResetUserPasswordViewModel();
    private bool BatchVisibility { get; set; } = false;
    private async void OnViewRecord()
    {
        try
        {
            var m = UserGrid.SelectedRecords;
            if (m.Count == 0)
            {
                BatchVisibility = false;
                await ToastObj.Show(new ToastModel { Title = "Information!", Content = "Please select the user whose password you would like to reset.", CssClass = "e-toast-info", Icon = "e-info toast-icons" });
            }
            else if (m.Count > 1)
            {
                BatchVisibility = false;
                await ToastObj.Show(new ToastModel { Title = "Information!", Content = "Please select only one user.", CssClass = "e-toast-info", Icon = "e-info toast-icons" });
            }
            else
            {
                InputModel = new ResetUserPasswordViewModel();
                InputModel.UserId = m[0].Id;
                InputModel.Username = m[0].UserName;
                BatchVisibility = true;
            }
        }
        catch (Exception ex)
        {
            await ToastObj.Show(new ToastModel { Title = "Error!", Content = ex.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
    }
    private async void onComfirmResetBtnclick()
    {
        try
        {
            var user = await _userManager.FindByNameAsync(InputModel.Username);
            var result = await _userManager.RemovePasswordAsync(user);
            if (result.Succeeded)
            {
                var _result = await _userManager.AddPasswordAsync(user, InputModel.Password);
                if (_result.Succeeded)
                {
                    BatchVisibility = false;
                    await ToastObj.Show(new ToastModel { Title = "Success!", Content = "Password for " + UserGrid.SelectedRecords[0].NameOfUserAccountHolder + " was successfully Changed", CssClass = "e-toast-success", Icon = "e-success toast-icons" });
                }
                else
                {
                    string error = string.Join(",", _result.Errors.Select(o => new { o.Description }).ToList());
                    await ToastObj.Show(new ToastModel { Title = "Error!", Content = error, CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                }
            }
            else
            {
                string error = string.Join(",", result.Errors.Select(o => new { o.Description }).ToList());
                await ToastObj.Show(new ToastModel { Title = "Error!", Content = error, CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
            }

        }
        catch (Exception ex)
        {
            await ToastObj.Show(new ToastModel { Title = "Error!", Content = ex.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        //finally
        //{
        //    BatchVisibility = false;
        //    StateHasChanged();
        //}
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (!userManagement.IsSignedIn())
            {
                Navigation.NavigateTo("Account/LoginPage", true);
            }
        }
        catch (Exception ex)
        {
            await ToastObj.Show(new ToastModel { Title = "Error!", Content = ex.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
    }
    public class AspNetUsersAdapter : DataAdaptor
    {
        public IToastService toastService;
        public AspNetUsersAdapter(IToastService ts)
        {
            toastService = ts;
        }
        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var data = new List<AspNetUsers>();
            try
            {
                using (var dbContext = new USAID_ICANContext())
                {
                    data = await dbContext.AspNetUsers.OrderBy(o => o.NameOfUserAccountHolder).ToListAsync();
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<AspNetUsers>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }
        // Performs BatchUpdate operation
        public override object BatchUpdate(DataManager dm, object Changed, object Added, object Deleted, string KeyField, string Key, int? dropIndex)
        {
            object value = null;

            return value;
        }

    }
}
